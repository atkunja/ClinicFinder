"use client";

import { useState, useRef, useEffect, Suspense } from "react";
import AdminGate from "@/components/AdminGate";

type ChatMessage = {
  role: "user" | "assistant";
  content: string;
};

function TriageAssistant() {
  const [messages, setMessages] = useState<ChatMessage[]>([{
    role: "assistant",
    content:
      "Hi! I’m the Bibi Foundation intake assistant. Tell me about the symptoms, how long they’ve been happening, and anything else I should know.",
  }]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const endRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => {
    endRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages, loading]);

  async function sendMessage(e: React.FormEvent) {
    e.preventDefault();
    const question = input.trim();
    if (!question || loading) return;

    const nextMessages = [...messages, { role: "user", content: question }];
    setMessages(nextMessages);
    setInput("");
    setLoading(true);

    try {
      const res = await fetch("/api/triage", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          question,
          history: messages.map((m) => ({ role: m.role, content: m.content })),
        }),
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data?.error || "Triage assistant error");
      setMessages((prev) => [...prev, { role: "assistant", content: data.message }]);
    } catch (error: any) {
      setMessages((prev) => [
        ...prev,
        { role: "assistant", content: `I ran into an issue: ${error?.message || "unknown error"}. Double-check the admin logs or API key.` },
      ]);
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="mx-auto flex w-full max-w-4xl flex-col gap-4">
      <header className="space-y-2 rounded-2xl border border-white/20 bg-white/10 p-5 text-white shadow-lg shadow-cyan-500/10">
        <div className="text-xs uppercase tracking-[0.3em] text-white/60">AI intake beta</div>
        <h1 className="text-2xl font-semibold">Symptom triage assistant</h1>
        <p className="text-sm text-white/75">
          Capture presenting concerns, red flags, and care barriers. Responses are generated by OpenAI ChatGPT and should be reviewed before sharing with community members.
        </p>
      </header>

      <div className="glass-panel relative flex min-h-[380px] flex-col gap-4 p-4 text-slate-900 sm:p-6">
        <div className="flex-1 space-y-4 overflow-y-auto pr-1">
          {messages.map((message, idx) => {
            const base = "max-w-lg rounded-2xl px-4 py-3 text-sm leading-relaxed shadow";
            const variant =
              message.role === "assistant"
                ? " bg-white text-slate-800 shadow-cyan-500/15"
                : " ml-auto bg-emerald-500 text-white shadow-emerald-500/20";
            return (
              <div key={idx} className={base + variant}>
                {message.content}
              </div>
            );
          })}
          {loading && (
            <div className="max-w-lg rounded-2xl bg-white px-4 py-3 text-sm text-slate-500 shadow shadow-cyan-500/15">
              Thinking through intake questions…
            </div>
          )}
          <div ref={endRef} />
        </div>

        <form onSubmit={sendMessage} className="mt-2 flex flex-col gap-3 sm:flex-row">
          <textarea
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Describe symptoms, onset, severity, barriers, or goals…"
            className="min-h-[90px] flex-1 resize-vertical rounded-2xl border border-slate-200/70 bg-white px-4 py-3 text-sm text-slate-900 shadow-inner shadow-white/30 outline-none focus:ring-2 focus:ring-emerald-400"
          />
          <button
            disabled={loading}
            className="inline-flex items-center justify-center rounded-2xl bg-gradient-to-r from-emerald-400 to-cyan-400 px-5 py-3 text-sm font-semibold text-slate-900 shadow-lg shadow-cyan-500/20 transition hover:from-emerald-300 hover:to-cyan-300 disabled:opacity-60"
          >
            {loading ? "Sending…" : "Send"}
          </button>
        </form>
      </div>
    </div>
  );
}

export default function AdminTriagePage() {
  return (
    <Suspense fallback={<div className="p-6 text-white">Loading triage assistant…</div>}>
      <AdminGate>
        <main className="px-4 pb-16 pt-20 text-white sm:pb-20 sm:pt-24">
          <TriageAssistant />
        </main>
      </AdminGate>
    </Suspense>
  );
}
